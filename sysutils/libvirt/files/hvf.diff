diff --git src/conf/domain_conf.c src/conf/domain_conf.c
--- src/conf/domain_conf.c
+++ src/conf/domain_conf.c
@@ -130,6 +130,7 @@ VIR_ENUM_IMPL(virDomainVirt,
               "parallels",
               "bhyve",
               "vz",
+              "hvf",
 );
 
 VIR_ENUM_IMPL(virDomainOS,
@@ -160,6 +161,7 @@ VIR_ENUM_IMPL(virDomainFeature,
               "privnet",
               "hyperv",
               "kvm",
+              "hvf",
               "pvspinlock",
               "capabilities",
               "pmu",
@@ -210,6 +212,10 @@ VIR_ENUM_IMPL(virDomainKVM,
               "hint-dedicated",
 );
 
+VIR_ENUM_IMPL(virDomainHVF,
+              VIR_DOMAIN_HVF_LAST,
+);
+
 VIR_ENUM_IMPL(virDomainXen,
               VIR_DOMAIN_XEN_LAST,
               "e820_host",
@@ -19339,6 +19345,7 @@ virDomainFeaturesDefParse(virDomainDefPt
         case VIR_DOMAIN_FEATURE_PRIVNET:
         case VIR_DOMAIN_FEATURE_HYPERV:
         case VIR_DOMAIN_FEATURE_KVM:
+        case VIR_DOMAIN_FEATURE_HVF:
         case VIR_DOMAIN_FEATURE_MSRS:
         case VIR_DOMAIN_FEATURE_XEN:
             def->features[val] = VIR_TRISTATE_SWITCH_ON;
@@ -23448,6 +23455,7 @@ virDomainDefFeaturesCheckABIStability(vi
         case VIR_DOMAIN_FEATURE_PRIVNET:
         case VIR_DOMAIN_FEATURE_HYPERV:
         case VIR_DOMAIN_FEATURE_KVM:
+        case VIR_DOMAIN_FEATURE_HVF:
         case VIR_DOMAIN_FEATURE_XEN:
         case VIR_DOMAIN_FEATURE_PVSPINLOCK:
         case VIR_DOMAIN_FEATURE_PMU:
@@ -29333,6 +29341,24 @@ virDomainDefFormatFeatures(virBufferPtr 
             virBufferAddLit(&childBuf, "</kvm>\n");
             break;
 
+        case VIR_DOMAIN_FEATURE_HVF:
+            if (def->features[i] != VIR_TRISTATE_SWITCH_ON)
+                break;
+
+            virBufferAddLit(&childBuf, "<hvf>\n");
+            virBufferAdjustIndent(&childBuf, 2);
+            for (j = 0; j < VIR_DOMAIN_HVF_LAST; j++) {
+                switch ((virDomainHVF) j) {
+
+                /* coverity[dead_error_begin] */
+                case VIR_DOMAIN_HVF_LAST:
+                    break;
+                }
+            }
+            virBufferAdjustIndent(&childBuf, -2);
+            virBufferAddLit(&childBuf, "</hvf>\n");
+            break;
+
         case VIR_DOMAIN_FEATURE_XEN:
             if (def->features[i] != VIR_TRISTATE_SWITCH_ON)
                 break;
diff --git src/conf/domain_conf.h src/conf/domain_conf.h
--- src/conf/domain_conf.h
+++ src/conf/domain_conf.h
@@ -137,6 +137,7 @@ typedef enum {
     VIR_DOMAIN_VIRT_PARALLELS,
     VIR_DOMAIN_VIRT_BHYVE,
     VIR_DOMAIN_VIRT_VZ,
+    VIR_DOMAIN_VIRT_HVF,
 
     VIR_DOMAIN_VIRT_LAST
 } virDomainVirtType;
@@ -1823,6 +1824,7 @@ typedef enum {
     VIR_DOMAIN_FEATURE_CFPC,
     VIR_DOMAIN_FEATURE_SBBC,
     VIR_DOMAIN_FEATURE_IBS,
+    VIR_DOMAIN_FEATURE_HVF,
 
     VIR_DOMAIN_FEATURE_LAST
 } virDomainFeature;
@@ -1856,6 +1858,10 @@ typedef enum {
 } virDomainKVM;
 
 typedef enum {
+    VIR_DOMAIN_HVF_LAST
+} virDomainHVF;
+
+typedef enum {
     VIR_DOMAIN_MSRS_UNKNOWN = 0,
 
     VIR_DOMAIN_MSRS_LAST
@@ -2542,6 +2548,7 @@ struct _virDomainDef {
     int caps_features[VIR_DOMAIN_PROCES_CAPS_FEATURE_LAST];
     int hyperv_features[VIR_DOMAIN_HYPERV_LAST];
     int kvm_features[VIR_DOMAIN_KVM_LAST];
+    int hvf_features[VIR_DOMAIN_HVF_LAST];
     int msrs_features[VIR_DOMAIN_MSRS_LAST];
     int xen_features[VIR_DOMAIN_XEN_LAST];
     int xen_passthrough_mode;
@@ -3593,6 +3600,7 @@ VIR_ENUM_DECL(virDomainGraphicsSpiceMous
 VIR_ENUM_DECL(virDomainGraphicsVNCSharePolicy);
 VIR_ENUM_DECL(virDomainHyperv);
 VIR_ENUM_DECL(virDomainKVM);
+VIR_ENUM_DECL(virDomainHVF);
 VIR_ENUM_DECL(virDomainXen);
 VIR_ENUM_DECL(virDomainXenPassthroughMode);
 VIR_ENUM_DECL(virDomainMsrsUnknown);
diff --git src/qemu/qemu_capabilities.c src/qemu/qemu_capabilities.c
--- src/qemu/qemu_capabilities.c
+++ src/qemu/qemu_capabilities.c
@@ -55,6 +55,10 @@
 #include <unistd.h>
 #include <stdarg.h>
 #include <sys/utsname.h>
+#ifdef __APPLE__
+# include <sys/types.h>
+# include <sys/sysctl.h>
+#endif
 
 #define VIR_FROM_THIS VIR_FROM_QEMU
 
@@ -513,6 +517,7 @@ VIR_ENUM_IMPL(virQEMUCaps,
               "memory-backend-memfd",
               "memory-backend-memfd.hugetlb",
               "iothread.poll-max-ns",
+              "hvf",
 
               /* 320 */
               "machine.pseries.cap-nested-hv",
@@ -696,6 +701,7 @@ struct _virQEMUCaps {
 
     /* Capabilities which may differ depending on the accelerator. */
     virQEMUCapsAccel kvm;
+    virQEMUCapsAccel hvf;
     virQEMUCapsAccel tcg;
 };
 
@@ -746,6 +752,42 @@ const char *virQEMUCapsArchToString(virA
     return virArchToString(arch);
 }
 
+static bool
+virQEMUCapsTypeIsAccelerated(virDomainVirtType type)
+{
+    return type == VIR_DOMAIN_VIRT_KVM ||
+           type == VIR_DOMAIN_VIRT_HVF;
+}
+
+static bool
+virQEMUCapsHaveAccel(virQEMUCapsPtr qemuCaps)
+{
+    return virQEMUCapsGet(qemuCaps, QEMU_CAPS_KVM) ||
+           virQEMUCapsGet(qemuCaps, QEMU_CAPS_HVF);
+}
+
+static virDomainVirtType
+virQEMUCapsToVirtType(virQEMUCapsPtr qemuCaps)
+{
+    if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_KVM))
+        return VIR_DOMAIN_VIRT_KVM;
+    else if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_HVF))
+        return VIR_DOMAIN_VIRT_HVF;
+    else
+        return VIR_DOMAIN_VIRT_QEMU;
+}
+
+static const char *
+virQEMUCapsAccelStr(virDomainVirtType type)
+{
+    if (type == VIR_DOMAIN_VIRT_KVM) {
+        return "kvm";
+    } else if (type == VIR_DOMAIN_VIRT_HVF) {
+        return "hvf";
+    } else {
+        return "tcg";
+    }
+}
 
 /* Checks whether a domain with @guest arch can run natively on @host.
  */
@@ -799,6 +841,8 @@ virQEMUCapsGetAccel(virQEMUCapsPtr qemuC
 {
     if (type == VIR_DOMAIN_VIRT_KVM)
         return &qemuCaps->kvm;
+    else if (type == VIR_DOMAIN_VIRT_HVF)
+        return &qemuCaps->hvf;
 
     return &qemuCaps->tcg;
 }
@@ -928,6 +972,8 @@ virQEMUCapsGetMachineTypesCaps(virQEMUCa
      * take the set of machine types we probed first. */
     if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_KVM))
         accel = &qemuCaps->kvm;
+    else if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_HVF))
+        accel = &qemuCaps->hvf;
     else
         accel = &qemuCaps->tcg;
 
@@ -1058,6 +1104,17 @@ virQEMUCapsInitGuestFromBinary(virCapsPt
             goto cleanup;
         }
     }
+    
+    if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_HVF)) {
+        if (virCapabilitiesAddGuestDomain(guest,
+                                          VIR_DOMAIN_VIRT_HVF,
+                                          NULL,
+                                          NULL,
+                                          0,
+                                          NULL) == NULL) {
+            goto cleanup;
+        }
+    }
 
     if ((ARCH_IS_X86(guestarch) || guestarch == VIR_ARCH_AARCH64))
         virCapabilitiesAddGuestFeatureWithToggle(guest, VIR_CAPS_GUEST_FEATURE_TYPE_ACPI,
@@ -1934,6 +1991,7 @@ virQEMUCapsPtr virQEMUCapsNewCopy(virQEM
     ret->arch = qemuCaps->arch;
 
     if (virQEMUCapsAccelCopy(&ret->kvm, &qemuCaps->kvm) < 0 ||
+        virQEMUCapsAccelCopy(&ret->hvf, &qemuCaps->hvf) < 0 ||
         virQEMUCapsAccelCopy(&ret->tcg, &qemuCaps->tcg) < 0)
         goto error;
 
@@ -1990,6 +2048,7 @@ void virQEMUCapsDispose(void *obj)
     virSEVCapabilitiesFree(qemuCaps->sevCapabilities);
 
     virQEMUCapsAccelClear(&qemuCaps->kvm);
+    virQEMUCapsAccelClear(&qemuCaps->hvf);
     virQEMUCapsAccelClear(&qemuCaps->tcg);
 }
 
@@ -2373,6 +2432,10 @@ virQEMUCapsIsVirtTypeSupported(virQEMUCa
     if (virtType == VIR_DOMAIN_VIRT_KVM &&
         virQEMUCapsGet(qemuCaps, QEMU_CAPS_KVM))
         return true;
+    
+    if (virtType == VIR_DOMAIN_VIRT_HVF &&
+        virQEMUCapsGet(qemuCaps, QEMU_CAPS_HVF))
+        return true;
 
     return false;
 }
@@ -2406,7 +2469,7 @@ virQEMUCapsIsCPUModeSupported(virQEMUCap
 
     switch (mode) {
     case VIR_CPU_MODE_HOST_PASSTHROUGH:
-        return type == VIR_DOMAIN_VIRT_KVM &&
+        return (type == VIR_DOMAIN_VIRT_KVM || type == VIR_DOMAIN_VIRT_HVF) &&
                virQEMUCapsGuestIsNative(hostarch, qemuCaps->arch);
 
     case VIR_CPU_MODE_HOST_MODEL:
@@ -3031,7 +3094,7 @@ virQEMUCapsProbeQMPHostCPU(virQEMUCapsPt
                            qemuMonitorPtr mon,
                            virDomainVirtType virtType)
 {
-    const char *model = virtType == VIR_DOMAIN_VIRT_KVM ? "host" : "max";
+    const char *model = virtType == VIR_DOMAIN_VIRT_KVM || virtType == VIR_DOMAIN_VIRT_HVF ? "host" : "max";
     qemuMonitorCPUModelInfoPtr modelInfo = NULL;
     qemuMonitorCPUModelInfoPtr nonMigratable = NULL;
     virHashTablePtr hash = NULL;
@@ -3258,6 +3321,33 @@ virQEMUCapsProbeQMPKVMState(virQEMUCapsP
     return 0;
 }
 
+#ifdef __APPLE__
+static int
+virQEMUCapsProbeHVF(virQEMUCapsPtr qemuCaps)
+{
+    int hv_support;
+    size_t len = sizeof(hv_support);
+    if (sysctlbyname("kern.hv_support", &hv_support, &len, NULL, 0))
+        hv_support = 0;
+
+    if (qemuCaps->version >= 2012000 &&
+        ARCH_IS_X86(qemuCaps->arch) &&
+        hv_support) {
+        virQEMUCapsSet(qemuCaps, QEMU_CAPS_HVF);
+    }
+
+    return 0;
+}
+#else
+static int
+virQEMUCapsProbeHVF(virQEMUCapsPtr qemuCaps)
+{
+  (void) qemuCaps;
+
+  return 0;
+}
+#endif
+
 struct virQEMUCapsCommandLineProps {
     const char *option;
     const char *param;
@@ -3737,7 +3827,7 @@ virQEMUCapsInitHostCPUModel(virQEMUCapsP
                   virArchToString(qemuCaps->arch),
                   virDomainVirtTypeToString(type));
         goto error;
-    } else if (type == VIR_DOMAIN_VIRT_KVM &&
+    } else if ((type == VIR_DOMAIN_VIRT_KVM || type == VIR_DOMAIN_VIRT_HVF) &&
                virCPUGetHostIsSupported(qemuCaps->arch)) {
         if (!(fullCPU = virQEMUCapsProbeHostCPU(qemuCaps->arch, NULL)))
             goto error;
@@ -4093,7 +4183,7 @@ virQEMUCapsLoadAccel(virQEMUCapsPtr qemu
                      virDomainVirtType type)
 {
     virQEMUCapsAccelPtr caps = virQEMUCapsGetAccel(qemuCaps, type);
-    const char *typeStr = type == VIR_DOMAIN_VIRT_KVM ? "kvm" : "tcg";
+    const char *typeStr = type == VIR_DOMAIN_VIRT_KVM ? "kvm" : type == VIR_DOMAIN_VIRT_HVF ? "hvf" : "tcg";
 
     if (virQEMUCapsLoadHostCPUModelInfo(caps, ctxt, typeStr) < 0)
         return -1;
@@ -4337,6 +4427,7 @@ virQEMUCapsLoadCache(virArch hostArch,
     VIR_FREE(str);
 
     if (virQEMUCapsLoadAccel(qemuCaps, ctxt, VIR_DOMAIN_VIRT_KVM) < 0 ||
+        virQEMUCapsLoadAccel(qemuCaps, ctxt, VIR_DOMAIN_VIRT_HVF) < 0 ||
         virQEMUCapsLoadAccel(qemuCaps, ctxt, VIR_DOMAIN_VIRT_QEMU) < 0)
         goto cleanup;
 
@@ -4409,7 +4500,10 @@ virQEMUCapsLoadCache(virArch hostArch,
     if (virQEMUCapsParseSEVInfo(qemuCaps, ctxt) < 0)
         goto cleanup;
 
-    virQEMUCapsInitHostCPUModel(qemuCaps, hostArch, VIR_DOMAIN_VIRT_KVM);
+    if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_KVM))
+        virQEMUCapsInitHostCPUModel(qemuCaps, hostArch, VIR_DOMAIN_VIRT_KVM);
+    if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_HVF))
+        virQEMUCapsInitHostCPUModel(qemuCaps, hostArch, VIR_DOMAIN_VIRT_HVF);
     virQEMUCapsInitHostCPUModel(qemuCaps, hostArch, VIR_DOMAIN_VIRT_QEMU);
 
     if (virXPathBoolean("boolean(./kvmSupportsNesting)", ctxt) > 0)
@@ -4556,7 +4650,7 @@ virQEMUCapsFormatAccel(virQEMUCapsPtr qe
                        virDomainVirtType type)
 {
     virQEMUCapsAccelPtr caps = virQEMUCapsGetAccel(qemuCaps, type);
-    const char *typeStr = type == VIR_DOMAIN_VIRT_KVM ? "kvm" : "tcg";
+    const char *typeStr = type == VIR_DOMAIN_VIRT_KVM ? "kvm" : type == VIR_DOMAIN_VIRT_HVF ?  "hvf" : "tcg";
 
     virQEMUCapsFormatHostCPUModelInfo(caps, buf, typeStr);
     virQEMUCapsFormatCPUModels(caps, buf, typeStr);
@@ -4629,7 +4723,8 @@ virQEMUCapsFormatCache(virQEMUCapsPtr qe
 
     virBufferAsprintf(&buf, "<arch>%s</arch>\n",
                       virArchToString(qemuCaps->arch));
-
+    
+    virQEMUCapsFormatAccel(qemuCaps, &buf, VIR_DOMAIN_VIRT_HVF);
     virQEMUCapsFormatAccel(qemuCaps, &buf, VIR_DOMAIN_VIRT_KVM);
     virQEMUCapsFormatAccel(qemuCaps, &buf, VIR_DOMAIN_VIRT_QEMU);
 
@@ -5220,6 +5315,8 @@ virQEMUCapsGetVirtType(virQEMUCapsPtr qe
     virDomainVirtType type;
     if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_KVM))
         type = VIR_DOMAIN_VIRT_KVM;
+    if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_HVF))
+        type = VIR_DOMAIN_VIRT_HVF;
     else if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_TCG))
         type = VIR_DOMAIN_VIRT_QEMU;
     else
@@ -5271,6 +5368,9 @@ virQEMUCapsInitQMPMonitor(virQEMUCapsPtr
     /* Some capabilities may differ depending on KVM state */
     if (virQEMUCapsProbeQMPKVMState(qemuCaps, mon) < 0)
         return -1;
+    
+    if (virQEMUCapsProbeHVF(qemuCaps) < 0)
+        return -1;
 
     type = virQEMUCapsGetVirtType(qemuCaps);
     accel = virQEMUCapsGetAccel(qemuCaps, type);
@@ -5448,7 +5548,10 @@ virQEMUCapsNewForBinaryInternal(virArch 
     qemuCaps->libvirtCtime = virGetSelfLastChanged();
     qemuCaps->libvirtVersion = LIBVIR_VERSION_NUMBER;
 
-    virQEMUCapsInitHostCPUModel(qemuCaps, hostArch, VIR_DOMAIN_VIRT_KVM);
+    if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_KVM))
+        virQEMUCapsInitHostCPUModel(qemuCaps, hostArch, VIR_DOMAIN_VIRT_KVM);
+    if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_HVF))
+        virQEMUCapsInitHostCPUModel(qemuCaps, hostArch, VIR_DOMAIN_VIRT_HVF);
     virQEMUCapsInitHostCPUModel(qemuCaps, hostArch, VIR_DOMAIN_VIRT_QEMU);
 
     if (virQEMUCapsGet(qemuCaps, QEMU_CAPS_KVM)) {
@@ -5782,13 +5885,20 @@ virQEMUCapsCacheLookupDefault(virFileCac
     if (virttype == VIR_DOMAIN_VIRT_NONE)
         virttype = capsType;
 
-    if (virttype == VIR_DOMAIN_VIRT_KVM && capsType == VIR_DOMAIN_VIRT_QEMU) {
+    if (virttype == VIR_DOMAIN_VIRT_KVM && capsType != VIR_DOMAIN_VIRT_KVM) {
         virReportError(VIR_ERR_INVALID_ARG,
                        _("KVM is not supported by '%s' on this host"),
                        binary);
         goto cleanup;
     }
 
+    if (virttype == VIR_DOMAIN_VIRT_HVF && capsType != VIR_DOMAIN_VIRT_HVF) {
+        virReportError(VIR_ERR_INVALID_ARG,
+                       _("Hypervisor.framework is not supported by '%s' on this host"),
+                       binary);
+        goto cleanup;
+    }
+
     if (machine) {
         /* Turn @machine into canonical name */
         machine = virQEMUCapsGetCanonicalMachine(qemuCaps, virttype, machine);
@@ -6397,6 +6507,7 @@ virQEMUCapsStripMachineAliasesForVirtTyp
 void
 virQEMUCapsStripMachineAliases(virQEMUCapsPtr qemuCaps)
 {
+    virQEMUCapsStripMachineAliasesForVirtType(qemuCaps, VIR_DOMAIN_VIRT_HVF);
     virQEMUCapsStripMachineAliasesForVirtType(qemuCaps, VIR_DOMAIN_VIRT_KVM);
     virQEMUCapsStripMachineAliasesForVirtType(qemuCaps, VIR_DOMAIN_VIRT_QEMU);
 }
diff --git src/qemu/qemu_capabilities.h src/qemu/qemu_capabilities.h
--- src/qemu/qemu_capabilities.h
+++ src/qemu/qemu_capabilities.h
@@ -493,6 +493,7 @@ typedef enum { /* virQEMUCapsFlags group
     QEMU_CAPS_OBJECT_MEMORY_MEMFD, /* -object memory-backend-memfd */
     QEMU_CAPS_OBJECT_MEMORY_MEMFD_HUGETLB, /* -object memory-backend-memfd.hugetlb */
     QEMU_CAPS_IOTHREAD_POLLING, /* -object iothread.poll-max-ns */
+    QEMU_CAPS_HVF, /* Whether Hypervisor.framework is available */
 
     /* 320 */
     QEMU_CAPS_MACHINE_PSERIES_CAP_NESTED_HV, /* -machine pseries.cap-nested-hv */
diff --git src/qemu/qemu_command.c src/qemu/qemu_command.c
--- src/qemu/qemu_command.c
+++ src/qemu/qemu_command.c
@@ -6739,6 +6739,10 @@ qemuBuildMachineCommandLine(virCommandPt
         virBufferAddLit(&buf, ",accel=kvm");
         break;
 
+    case VIR_DOMAIN_VIRT_HVF:
+        virBufferAddLit(&buf, ",accel=hvf");
+        break;
+
     case VIR_DOMAIN_VIRT_KQEMU:
     case VIR_DOMAIN_VIRT_XEN:
     case VIR_DOMAIN_VIRT_LXC:
